import { NextRequest, NextResponse } from 'next/server';

// Interface pour les donn√©es de demande de place (funnel search)
interface SearchRequestData {
  // Donn√©es de localisation compl√®tes
  departure: {
    country: string;
    city: string;
    postalCode: string;
    displayName: string;
    isComplete?: boolean;
  };
  arrival: {
    country: string;
    city: string;
    postalCode: string;
    displayName: string;
    isComplete?: boolean;
  };
  
  // P√©riode d'exp√©dition flexible
  shippingPeriod: {
    period: 'flexible' | 'specific' | '';
    selectedMonths?: string[];
    urgency: 'urgent' | 'normal' | 'flexible' | '';
  };
  
  // Volume recherch√© avec donn√©es calculateur
  volumeNeeded: {
    neededVolume: number;
    usedCalculator?: boolean;
    listingItems?: string;
    volumeDescription?: string;
  };
  
  // Budget/participation aux frais
  budget: {
    acceptsFees: boolean | null;
  };
  
  // Texte de l'annonce/demande
  announcementText: string;
  
  // Informations de contact compl√®tes
  contact: {
    firstName: string;
    email: string;
    phone?: string;
  };
  
  // M√©tadonn√©es du funnel
  currentStep?: number;
  isCompleted?: boolean;
  funnelType: 'search';
  
  // Timestamps pour le suivi
  createdAt?: string;
  submittedAt?: string;
}

export async function POST(request: NextRequest) {
  try {
    const data: SearchRequestData = await request.json();

    console.log('üì• Demande de place re√ßue pour soumission:', {
      email: data.contact.email,
      firstName: data.contact.firstName,
      departure: data.departure.displayName,
      arrival: data.arrival.displayName,
      volumeNeeded: data.volumeNeeded.neededVolume,
      acceptsFees: data.budget.acceptsFees,
      selectedMonths: data.shippingPeriod.selectedMonths?.join(', ') || 'Aucun',
      urgency: data.shippingPeriod.urgency,
      announcementLength: data.announcementText?.length || 0,
      phone: data.contact.phone ? 'Fourni' : 'Non fourni',
      usedCalculator: data.volumeNeeded.usedCalculator || false
    });

    // Validation des donn√©es requises
    if (!data.contact.email || !data.contact.firstName) {
      return NextResponse.json(
        { error: 'Email et pr√©nom sont requis' },
        { status: 400 }
      );
    }

    if (!data.departure.country || !data.arrival.country) {
      return NextResponse.json(
        { error: 'Destinations de d√©part et d\'arriv√©e sont requises' },
        { status: 400 }
      );
    }

    if (!data.volumeNeeded.neededVolume || data.volumeNeeded.neededVolume <= 0) {
      return NextResponse.json(
        { error: 'Volume recherch√© doit √™tre sup√©rieur √† 0' },
        { status: 400 }
      );
    }

    if (data.budget.acceptsFees === null) {
      return NextResponse.json(
        { error: 'Position sur la participation aux frais est requise' },
        { status: 400 }
      );
    }

    if (!data.announcementText || data.announcementText.length < 10) {
      return NextResponse.json(
        { error: 'Description de la demande doit contenir au moins 10 caract√®res' },
        { status: 400 }
      );
    }

    // Enrichissement des donn√©es avant envoi au backend
    const enrichedData = {
      ...data,
      // Ajout des m√©tadonn√©es
      announcementTextLength: data.announcementText.length,
      submittedAt: new Date().toISOString(),
      
      // Formatage des mois s√©lectionn√©s
      shippingMonthsFormatted: data.shippingPeriod.selectedMonths?.join(', ') || 'Flexible',
      
      // Ajout d'informations sur le volume en texte
      volumeDisplay: `${data.volumeNeeded.neededVolume} m¬≥`,
      budgetDisplay: data.budget.acceptsFees ? 'Accepte de participer aux frais' : 'Ne souhaite pas participer aux frais',
      
      // Ajout de champs compatibles pour l'email - format simple pour le backend
      departureCountry: data.departure.country,
      departureCity: data.departure.city,
      departurePostalCode: data.departure.postalCode,
      
      arrivalCountry: data.arrival.country,
      arrivalCity: data.arrival.city,
      arrivalPostalCode: data.arrival.postalCode,
      
      // Pour compatibilit√© avec les templates email
      departureLocation: data.departure.displayName || `${data.departure.city}, ${data.departure.country}`,
      arrivalLocation: data.arrival.displayName || `${data.arrival.city}, ${data.arrival.country}`,
      
      // Ajout du statut initial pour les demandes
      status: 'pending_validation',
      requestType: 'search', // Diff√©rencier des annonces "propose"
      
      // Ajout de l'√©tape de finalisation
      isCompleted: true,
      currentStep: 6, // √âtape finale du funnel search
      
      // Informations sur l'origine de la soumission
      source: 'dodo-partage-search-frontend',
      userAgent: request.headers.get('user-agent') || 'Unknown',
      ipAddress: request.headers.get('x-forwarded-for') || 
                 request.headers.get('x-real-ip') || 
                 'Unknown',
      
      // Donn√©es sp√©cifiques au calculateur si utilis√©
      ...(data.volumeNeeded.usedCalculator && {
        calculatorData: {
          usedCalculator: true,
          listingItems: data.volumeNeeded.listingItems,
          volumeDescription: data.volumeNeeded.volumeDescription
        }
      })
    };

    // Envoi vers le backend centralis√© Dodomove
    console.log('üì§ Envoi de la demande de place vers le backend centralis√©...');
    
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'https://web-production-7b738.up.railway.app';
    
    const response = await fetch(`${backendUrl}/api/partage/submit-search-request`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Frontend-Source': 'dodo-partage-search',
        'X-Frontend-Version': '1.0.0',
      },
      body: JSON.stringify(enrichedData),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Erreur de communication avec le serveur' }));
      console.error('‚ùå Erreur backend:', {
        status: response.status,
        statusText: response.statusText,
        error: errorData
      });
      
      // Gestion sp√©cifique des erreurs de doublons
      if (response.status === 429) {
        console.log('‚ö†Ô∏è D√©tection de doublon potentiel (verrou) - Trait√© comme succ√®s');
        return NextResponse.json({
          success: true,
          message: 'Demande d√©j√† cr√©√©e ou en cours de traitement',
          isDuplicate: true,
          data: {
            email: data.contact.email,
            status: 'pending_validation',
            message: 'Une demande similaire a d√©j√† √©t√© soumise r√©cemment'
          },
          nextSteps: [
            'V√©rifiez votre bo√Æte email pour l\'email de confirmation',
            'Si vous n\'avez pas re√ßu d\'email, v√©rifiez vos spams',
            'La demande sera visible apr√®s validation par email'
          ]
        }, { status: 200 });
      }
      
      // Gestion sp√©cifique des doublons d√©tect√©s dans la base de donn√©es
      if (response.status === 409) {
        console.log('‚ö†Ô∏è Doublon d√©tect√© dans la base - Trait√© comme succ√®s');
        return NextResponse.json({
          success: true,
          message: 'Demande d√©j√† existante',
          isDuplicate: true,
          data: {
            email: data.contact.email,
            status: 'existing',
            message: 'Une demande identique existe d√©j√†'
          },
          nextSteps: [
            'Votre demande pr√©c√©dente est toujours active',
            'Consultez votre email de confirmation pour la g√©rer',
            'Vous pouvez modifier ou supprimer votre demande via les liens dans l\'email'
          ]
        }, { status: 200 });
      }
      
      throw new Error(errorData.error || `Erreur ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    console.log('‚úÖ Demande de place soumise avec succ√®s:', result);

    return NextResponse.json({
      success: true,
      message: 'Demande de place soumise avec succ√®s',
      data: result,
      nextSteps: [
        'Un email de validation a √©t√© envoy√© √† votre adresse',
        'Cliquez sur le lien dans l\'email pour confirmer votre demande',
        'Votre demande sera ensuite visible par les transporteurs',
        'Vous recevrez un email de confirmation une fois la demande publi√©e'
      ]
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la soumission de la demande:', error);
    
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Erreur interne du serveur',
        details: 'Une erreur s\'est produite lors de la soumission de votre demande de place'
      },
      { status: 500 }
    );
  }
} 