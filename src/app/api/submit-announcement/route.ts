import { NextRequest, NextResponse } from 'next/server';
import { convertSingleDateToPeriod } from '@/utils/dateUtils';

// Interface compl√®te pour les donn√©es de l'annonce avec toutes les donn√©es du funnel
interface AnnouncementData {
  // Donn√©es de localisation compl√®tes
  departure: {
    country: string;
    city: string;
    postalCode: string;
    displayName: string;
    isComplete?: boolean;
  };
  arrival: {
    country: string;
    city: string;
    postalCode: string;
    displayName: string;
    isComplete?: boolean;
  };
  
  // Date d'exp√©dition
  shippingDate: string;
  
  // D√©tails du conteneur complets
  container: {
    type: '20' | '40';
    availableVolume: number;
    minimumVolume: number;
  };
  
  // Type d'offre
  offerType: 'free' | 'paid';
  
  // Texte de l'annonce
  announcementText: string;
  
  // Informations de contact compl√®tes
  contact: {
    firstName: string;
    email: string;
    phone?: string;
  };
  
  // M√©tadonn√©es du funnel
  currentStep?: number;
  isCompleted?: boolean;
  
  // Donn√©es calcul√©es
  announcementTextLength?: number;
  
  // Timestamps pour le suivi
  createdAt?: string;
  submittedAt?: string;
}

export async function POST(request: NextRequest) {
  try {
    const data: AnnouncementData = await request.json();

    console.log('üì• Donn√©es re√ßues pour soumission:', {
      email: data.contact.email,
      firstName: data.contact.firstName,
      departure: data.departure.displayName,
      arrival: data.arrival.displayName,
      containerType: data.container.type,
      availableVolume: data.container.availableVolume,
      minimumVolume: data.container.minimumVolume,
      offerType: data.offerType,
      shippingDate: data.shippingDate,
      announcementLength: data.announcementText?.length || 0,
      phone: data.contact.phone ? 'Fourni' : 'Non fourni'
    });

    // Validation des donn√©es requises
    if (!data.contact.email || !data.contact.firstName) {
      return NextResponse.json(
        { error: 'Email et pr√©nom sont requis' },
        { status: 400 }
      );
    }

    if (!data.departure.country || !data.arrival.country) {
      return NextResponse.json(
        { error: 'Destinations de d√©part et d\'arriv√©e sont requises' },
        { status: 400 }
      );
    }

    if (!data.container.type || !data.container.availableVolume) {
      return NextResponse.json(
        { error: 'Informations du conteneur sont requises' },
        { status: 400 }
      );
    }

    if (!data.shippingDate) {
      return NextResponse.json(
        { error: 'Date d\'exp√©dition est requise' },
        { status: 400 }
      );
    }

    if (!data.announcementText || data.announcementText.length < 10) {
      return NextResponse.json(
        { error: 'Description de l\'annonce doit contenir au moins 10 caract√®res' },
        { status: 400 }
      );
    }

    // Conversion de la date unique en p√©riode pour les champs Airtable
    const periodData = convertSingleDateToPeriod(data.shippingDate);

    // Enrichissement des donn√©es avant envoi au backend
    const enrichedData = {
      ...data,
      // Ajout des m√©tadonn√©es
      announcementTextLength: data.announcementText.length,
      submittedAt: new Date().toISOString(),
      
      // Type de requ√™te pour Airtable
      request_type: 'offer', // Diff√©rencier des demandes "search"
      
      // Formatage de la date d'exp√©dition en fran√ßais
      shippingDateFormatted: periodData.formattedPeriod,
      
      // Nouvelles donn√©es de p√©riode pour Airtable
      shipping_period_start: periodData.startDate,
      shipping_period_end: periodData.endDate,
      shipping_period_formatted: periodData.formattedPeriod,
      
      // Ajout d'informations sur le conteneur en texte
      containerTypeDisplay: data.container.type === '20' ? '20 pieds' : '40 pieds',
      
      // Ajout de champs compatibles pour l'email - format simple pour le backend
      departureCountry: data.departure.country,
      departureCity: data.departure.city,
      departurePostalCode: data.departure.postalCode,
      
      arrivalCountry: data.arrival.country,
      arrivalCity: data.arrival.city,
      arrivalPostalCode: data.arrival.postalCode,
      
      // Pour compatibilit√© avec les templates email (construction du nom complet)
      departureLocation: data.departure.displayName || `${data.departure.city}, ${data.departure.country}`,
      arrivalLocation: data.arrival.displayName || `${data.arrival.city}, ${data.arrival.country}`,
      
      // Ajout du statut initial
      status: 'pending_validation',
      
      // Ajout de l'√©tape de finalisation
      isCompleted: true,
      currentStep: 7, // √âtape finale atteinte
      
      // Informations sur l'origine de la soumission
      source: 'dodo-partage-frontend',
      userAgent: request.headers.get('user-agent') || 'Unknown',
      ipAddress: request.headers.get('x-forwarded-for') || 
                 request.headers.get('x-real-ip') || 
                 'Unknown'
    };

    // Envoi vers le backend centralis√© Dodomove
    console.log('üì§ Envoi vers le backend centralis√© avec donn√©es compl√®tes...');
    
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'https://web-production-7b738.up.railway.app';
    
    const response = await fetch(`${backendUrl}/api/partage/submit-announcement`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Frontend-Source': 'dodo-partage',
        'X-Frontend-Version': '1.0.0',
      },
      body: JSON.stringify(enrichedData),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Erreur de communication avec le serveur' }));
      console.error('‚ùå Erreur backend:', {
        status: response.status,
        statusText: response.statusText,
        error: errorData
      });
      
      // Gestion sp√©cifique des erreurs de doublons
      if (response.status === 429) {
        console.log('‚ö†Ô∏è D√©tection de doublon potentiel (verrou) - Trait√© comme succ√®s');
        return NextResponse.json({
          success: true,
          message: 'Annonce d√©j√† cr√©√©e ou en cours de traitement',
          isDuplicate: true,
          data: {
            email: data.contact.email,
            status: 'pending_validation',
            message: 'Une annonce similaire a d√©j√† √©t√© soumise r√©cemment'
          },
          nextSteps: [
            'V√©rifiez votre bo√Æte email pour l\'email de confirmation',
            'Si vous n\'avez pas re√ßu d\'email, v√©rifiez vos spams',
            'L\'annonce sera visible apr√®s validation par email'
          ]
        }, { status: 200 }); // 200 au lieu de 429 pour √©viter l'erreur c√¥t√© frontend
      }
      
      // Gestion sp√©cifique des doublons d√©tect√©s dans la base de donn√©es
      if (response.status === 409) {
        console.log('‚ö†Ô∏è Doublon d√©tect√© dans la base - Trait√© comme succ√®s');
        return NextResponse.json({
          success: true,
          message: 'Annonce d√©j√† existante',
          isDuplicate: true,
          data: {
            email: data.contact.email,
            status: 'duplicate_detected',
            message: 'Une annonce similaire existe d√©j√† pour cette adresse email'
          },
          nextSteps: [
            'Une annonce similaire a d√©j√† √©t√© cr√©√©e r√©cemment',
            'V√©rifiez votre bo√Æte email pour l\'email de confirmation',
            'Si vous souhaitez cr√©er une nouvelle annonce, attendez quelques minutes',
            'Si vous n\'avez pas re√ßu d\'email, v√©rifiez vos spams'
          ]
        }, { status: 200 }); // 200 au lieu de 409 pour √©viter l'erreur c√¥t√© frontend
      }
      
      return NextResponse.json(
        { 
          error: 'Erreur lors de la sauvegarde de l\'annonce',
          details: errorData.error || `Erreur serveur (${response.status})`,
          suggestion: 'Veuillez r√©essayer dans quelques instants'
        },
        { status: response.status }
      );
    }

    const result = await response.json();
    console.log('‚úÖ Annonce soumise avec succ√®s via le backend centralis√©:', {
      reference: result.data?.reference,
      recordId: result.data?.recordId,
      status: result.data?.status
    });

    // R√©ponse de succ√®s avec toutes les informations
    return NextResponse.json({
      success: true,
      message: result.message || 'Annonce cr√©√©e avec succ√®s !',
      data: {
        reference: result.data?.reference,
        recordId: result.data?.recordId,
        email: data.contact.email,
        firstName: data.contact.firstName,
        departure: data.departure.displayName,
        arrival: data.arrival.displayName,
        shippingDate: data.shippingDate,
        shippingDateFormatted: enrichedData.shippingDateFormatted,
        containerType: enrichedData.containerTypeDisplay,
        availableVolume: data.container.availableVolume,
        minimumVolume: data.container.minimumVolume,
        offerType: data.offerType === 'free' ? 'Gratuit' : 'Avec participation aux frais',
        status: result.data?.status || 'En attente de validation',
        validationEmailSent: result.data?.validationEmailSent || true
      },
      nextSteps: result.nextSteps || [
        'Un email de confirmation a √©t√© envoy√© √† votre adresse',
        'Cliquez sur le lien dans l\'email pour valider votre annonce',
        'Votre annonce sera visible apr√®s validation',
        'Vous recevrez les demandes de contact par email'
      ],
      validation: {
        emailRequired: true,
        tokenSent: true,
        expiresIn: '7 jours'
      },
      backend: {
        used: 'centralized',
        url: backendUrl,
        timestamp: new Date().toISOString(),
        dataCompleteness: 'full'
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la soumission:', error);
    
    // Log d√©taill√© pour le debugging
    if (error instanceof Error) {
      console.error('D√©tails de l\'erreur:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
    }
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la soumission de l\'annonce',
        message: 'Une erreur technique s\'est produite. Veuillez r√©essayer.',
        details: error instanceof Error ? error.message : 'Erreur inconnue',
        suggestion: 'Si le probl√®me persiste, contactez notre support √† support@dodomove.fr',
        backend: {
          used: 'centralized',
          url: process.env.NEXT_PUBLIC_BACKEND_URL || 'https://web-production-7b738.up.railway.app',
          timestamp: new Date().toISOString(),
          error: true
        }
      },
      { status: 500 }
    );
  }
} 