/**
 * Script pour diagnostiquer les annonces supprim√©es qui apparaissent encore
 * Usage: node scripts/debug-deleted-announcements.js
 */

async function testAnnouncementFiltering() {
  console.log('üîç Diagnostic des annonces supprim√©es...\n');

  const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'https://web-production-7b738.up.railway.app';
  
  try {
    // Test 1: R√©cup√©ration avec statut par d√©faut (published)
    console.log('üìã Test 1: Annonces avec statut "published" (par d√©faut)');
    const publishedResponse = await fetch(`${backendUrl}/api/partage/get-announcements?status=published`);
    const publishedResult = await publishedResponse.json();
    
    console.log(`‚úÖ ${publishedResult.data?.length || 0} annonces publi√©es trouv√©es`);
    
    // V√©rifier s'il y a des annonces avec statut "deleted" dans les r√©sultats
    const deletedInPublished = publishedResult.data?.filter(ann => ann.status === 'deleted') || [];
    if (deletedInPublished.length > 0) {
      console.log(`‚ùå PROBL√àME: ${deletedInPublished.length} annonces supprim√©es trouv√©es dans les r√©sultats "published"!`);
      deletedInPublished.forEach(ann => {
        console.log(`   - ${ann.reference} (ID: ${ann.id}) - Statut: ${ann.status}`);
      });
    } else {
      console.log('‚úÖ Aucune annonce supprim√©e trouv√©e dans les r√©sultats "published"');
    }

    // Test 2: R√©cup√©ration de toutes les annonces (pour voir les supprim√©es)
    console.log('\nüìã Test 2: Toutes les annonces (status=all)');
    const allResponse = await fetch(`${backendUrl}/api/partage/get-announcements?status=all`);
    const allResult = await allResponse.json();
    
    console.log(`‚úÖ ${allResult.data?.length || 0} annonces totales trouv√©es (toutes sauf supprim√©es)`);
    
    // Test 3: R√©cup√©ration explicite des annonces supprim√©es
    console.log('\nüìã Test 3: Annonces supprim√©es uniquement (status=deleted)');
    const deletedResponse = await fetch(`${backendUrl}/api/partage/get-announcements?status=deleted`);
    const deletedResult = await deletedResponse.json();
    
    console.log(`‚úÖ ${deletedResult.data?.length || 0} annonces supprim√©es trouv√©es`);
    
    if (deletedResult.data?.length > 0) {
      console.log('üìù Liste des annonces supprim√©es:');
      deletedResult.data.forEach(ann => {
        console.log(`   - ${ann.reference} (ID: ${ann.id}) - Supprim√©e le: ${ann.deleted_at || 'Date inconnue'}`);
      });
    }

    // Test 4: Statistiques globales
    console.log('\nüìä Statistiques globales:');
    console.log(`   - Annonces publi√©es: ${publishedResult.data?.length || 0}`);
    console.log(`   - Annonces totales (sauf supprim√©es): ${allResult.data?.length || 0}`);
    console.log(`   - Annonces supprim√©es: ${deletedResult.data?.length || 0}`);
    
    // Test 5: V√©rification du frontend
    console.log('\nüìã Test 5: Test du frontend (comme l\'utilisateur)');
    const frontendResponse = await fetch('http://localhost:3000/api/get-announcements');
    
    if (frontendResponse.ok) {
      const frontendResult = await frontendResponse.json();
      console.log(`‚úÖ Frontend: ${frontendResult.data?.length || 0} annonces r√©cup√©r√©es`);
      
      const deletedInFrontend = frontendResult.data?.filter(ann => ann.status === 'deleted') || [];
      if (deletedInFrontend.length > 0) {
        console.log(`‚ùå PROBL√àME FRONTEND: ${deletedInFrontend.length} annonces supprim√©es apparaissent sur le site!`);
        deletedInFrontend.forEach(ann => {
          console.log(`   - ${ann.reference} - Statut: ${ann.status}`);
        });
      } else {
        console.log('‚úÖ Frontend: Aucune annonce supprim√©e trouv√©e (correct)');
      }
    } else {
      console.log('‚ö†Ô∏è  Impossible de tester le frontend (serveur Next.js non d√©marr√©?)');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Fonction pour identifier les annonces avec des statuts √©tranges
async function identifyProblematicAnnouncements() {
  console.log('\nüîç Recherche d\'annonces avec des statuts probl√©matiques...');
  
  // Cette fonction n√©cessiterait un acc√®s direct √† Airtable
  // Pour l'instant, nous utilisons l'API backend
  
  const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'https://web-production-7b738.up.railway.app';
  
  try {
    // R√©cup√©rer toutes les annonces (y compris supprim√©es pour analyse)
    console.log('üìã R√©cup√©ration de toutes les donn√©es pour analyse...');
    
    // Note: Cette requ√™te pourrait n√©cessiter une route sp√©ciale d'admin
    // Pour l'instant, on utilise les routes existantes
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error.message);
  }
}

// Ex√©cution du script
async function main() {
  console.log('üöÄ D√©marrage du diagnostic des annonces supprim√©es\n');
  
  await testAnnouncementFiltering();
  await identifyProblematicAnnouncements();
  
  console.log('\n‚úÖ Diagnostic termin√©');
  console.log('\nüí° Actions recommand√©es:');
  console.log('   1. Si des annonces supprim√©es apparaissent encore, v√©rifiez Airtable');
  console.log('   2. Red√©marrez le serveur backend Railway apr√®s les corrections');
  console.log('   3. Testez √† nouveau avec ce script');
  console.log('   4. V√©rifiez le site web directement');
}

main().catch(console.error); 