// Script pour analyser pourquoi les annonces ont √©t√© expir√©es
const fetch = require('node-fetch');

const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
const AIRTABLE_TOKEN = process.env.AIRTABLE_TOKEN;

if (!AIRTABLE_BASE_ID || !AIRTABLE_TOKEN) {
  console.error('‚ùå Variables d\'environnement manquantes: AIRTABLE_BASE_ID et AIRTABLE_TOKEN');
  process.exit(1);
}

/**
 * R√©cup√®re les annonces expir√©es
 */
async function getExpiredAnnouncements() {
  try {
    const response = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/DodoPartage%20Announcements?filterByFormula={status} = 'expired'&fields[]=id&fields[]=reference&fields[]=request_type&fields[]=status&fields[]=created_at&fields[]=shipping_date&fields[]=expired_at&fields[]=contact_first_name&fields[]=departure_country&fields[]=arrival_country&fields[]=expires_at`,
      {
        headers: {
          'Authorization': `Bearer ${AIRTABLE_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (!response.ok) {
      throw new Error(`Erreur API Airtable: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    return data.records || [];
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des annonces expir√©es:', error);
    throw error;
  }
}

/**
 * Analyse pourquoi une annonce a √©t√© expir√©e
 */
function analyzeExpiration(record) {
  const fields = record.fields;
  const now = new Date();
  
  console.log(`\nüîç ANALYSE: ${fields.reference || record.id}`);
  console.log(`   Type: ${fields.request_type}`);
  console.log(`   Propri√©taire: ${fields.contact_first_name}`);
  console.log(`   Trajet: ${fields.departure_country} ‚Üí ${fields.arrival_country}`);
  console.log(`   Cr√©√©e le: ${fields.created_at}`);
  console.log(`   Expir√©e le: ${fields.expired_at}`);
  
  // V√©rifier si expires_at √©tait d√©fini
  if (fields.expires_at) {
    const expirationDate = new Date(fields.expires_at);
    console.log(`   üìÖ Date d'expiration d√©finie: ${fields.expires_at}`);
    if (now >= expirationDate) {
      console.log(`   ‚è∞ RAISON: Expiration programm√©e atteinte`);
      return 'expiration_programmee';
    }
  }
  
  // Analyser selon le type
  if (fields.request_type === 'offer') {
    if (fields.shipping_date) {
      const shippingDate = new Date(fields.shipping_date);
      const dayAfterShipping = new Date(shippingDate);
      dayAfterShipping.setDate(dayAfterShipping.getDate() + 1);
      
      console.log(`   üö¢ Date de d√©part: ${fields.shipping_date}`);
      console.log(`   üìÖ Expiration automatique le: ${dayAfterShipping.toISOString().split('T')[0]}`);
      
      if (now >= dayAfterShipping) {
        console.log(`   ‚è∞ RAISON: Date de d√©part pass√©e (expire le lendemain)`);
        return 'date_depart_passee';
      }
    }
  } else if (fields.request_type === 'search') {
    if (fields.created_at) {
      const createdDate = new Date(fields.created_at);
      const expirationDate = new Date(createdDate);
      expirationDate.setDate(expirationDate.getDate() + 60);
      
      console.log(`   üìÖ Cr√©√©e le: ${fields.created_at}`);
      console.log(`   üìÖ Expiration automatique le: ${expirationDate.toISOString().split('T')[0]} (60 jours)`);
      
      if (now >= expirationDate) {
        console.log(`   ‚è∞ RAISON: 60 jours √©coul√©s depuis la cr√©ation`);
        return 'delai_recherche_expire';
      }
    }
  }
  
  console.log(`   ‚ùì RAISON: Inconnue (peut-√™tre expir√©e manuellement)`);
  return 'inconnue';
}

/**
 * Fonction principale
 */
async function analyzeAllExpired() {
  console.log('üîç Analyse des annonces expir√©es\n');
  
  try {
    const expiredAnnouncements = await getExpiredAnnouncements();
    
    if (expiredAnnouncements.length === 0) {
      console.log('‚úÖ Aucune annonce expir√©e trouv√©e');
      return;
    }
    
    console.log(`üìä ${expiredAnnouncements.length} annonce(s) expir√©e(s) trouv√©e(s):`);
    
    const reasons = {};
    
    for (const announcement of expiredAnnouncements) {
      const reason = analyzeExpiration(announcement);
      reasons[reason] = (reasons[reason] || 0) + 1;
    }
    
    console.log('\nüìä R√âSUM√â DES RAISONS D\'EXPIRATION:');
    Object.entries(reasons).forEach(([reason, count]) => {
      console.log(`   ‚Ä¢ ${reason}: ${count} annonce(s)`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error);
  }
}

// Ex√©cution
if (require.main === module) {
  analyzeAllExpired();
}

module.exports = { analyzeAllExpired, analyzeExpiration }; 