/**
 * üîç AUDIT DES ANNONCES D√âJ√Ä INDEX√âES PAR GOOGLE
 * 
 * Ce script g√©n√®re une liste des URLs d'annonces √† nettoyer pour √©viter les 404 SEO toxiques
 */

require('dotenv').config({ path: '.env.local' });

async function auditIndexedAnnouncements() {
  console.log('üîç Audit des annonces d√©j√† index√©es...\n');
  
  try {
    // 1. R√©cup√©rer toutes les annonces (actives + expir√©es + supprim√©es) via le backend centralis√©
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'https://web-production-7b738.up.railway.app';
    
    console.log('üì° R√©cup√©ration des annonces du backend centralis√©...');
    
    // Appeler l'API du backend centralis√© qui peut r√©cup√©rer toutes les annonces
    // On fait plusieurs appels pour r√©cup√©rer tous les statuts
    const [publishedRes, expiredRes, deletedRes] = await Promise.all([
      fetch(`${backendUrl}/api/partage/get-announcements?status=published`),
      fetch(`${backendUrl}/api/partage/get-announcements?status=expired`),
      fetch(`${backendUrl}/api/partage/get-announcements?status=deleted`)
    ]);
    
    // V√©rifier que tous les appels ont r√©ussi
    if (!publishedRes.ok || !expiredRes.ok || !deletedRes.ok) {
      throw new Error(`Erreur API: ${publishedRes.status}, ${expiredRes.status}, ${deletedRes.status}`);
    }
    
    // Parser les r√©sultats
    const [publishedResult, expiredResult, deletedResult] = await Promise.all([
      publishedRes.json(),
      expiredRes.json(),
      deletedRes.json()
    ]);
    
    // Combiner toutes les annonces
    const allAnnouncements = [
      ...(publishedResult.data || []),
      ...(expiredResult.data || []),
      ...(deletedResult.data || [])
    ];
    
    console.log(`üìä Total d'annonces trouv√©es: ${allAnnouncements.length}`);
    
    // 2. Analyser par statut
    const activeAnnouncements = allAnnouncements.filter(a => a.status === 'published');
    const expiredAnnouncements = allAnnouncements.filter(a => a.status === 'expired');
    const deletedAnnouncements = allAnnouncements.filter(a => a.status === 'deleted');
    
    console.log(`\nüìà R√©partition par statut:`);
    console.log(`  ‚úÖ Actives (published): ${activeAnnouncements.length}`);
    console.log(`  ‚è∞ Expir√©es (expired): ${expiredAnnouncements.length}`);
    console.log(`  üóëÔ∏è Supprim√©es (deleted): ${deletedAnnouncements.length}`);
    
    // 3. G√©n√©rer les URLs potentiellement index√©es (expir√©es + supprim√©es)
    const problematicAnnouncements = [...expiredAnnouncements, ...deletedAnnouncements];
    const problematicUrls = problematicAnnouncements.map(a => ({
      id: a.id,
      url: `https://www.dodomove.fr/partage/annonce/${a.id}`,
      status: a.status,
      title: a.title || `${a.departure} ‚Üí ${a.arrival}`,
      created_at: a.created_at,
      expired_at: a.expired_at || a.deleted_at
    }));
    
    console.log(`\nüö® URLs probl√©matiques (potentiellement index√©es): ${problematicUrls.length}`);
    
    // 4. √âcrire les listes pour Google Search Console
    const fs = require('fs');
    const path = require('path');
    
    // Liste des URLs √† supprimer de l'index Google
    const urlsToRemove = problematicUrls.map(item => item.url);
    fs.writeFileSync(
      path.join(__dirname, 'urls-to-remove-from-google.txt'),
      urlsToRemove.join('\n'),
      'utf8'
    );
    
    // Rapport d√©taill√© JSON
    fs.writeFileSync(
      path.join(__dirname, 'indexed-announcements-audit.json'),
      JSON.stringify({
        audit_date: new Date().toISOString(),
        summary: {
          total_announcements: allAnnouncements.length,
          active_announcements: activeAnnouncements.length,
          expired_announcements: expiredAnnouncements.length,
          deleted_announcements: deletedAnnouncements.length,
          problematic_urls: problematicUrls.length
        },
        urls_to_remove: problematicUrls
      }, null, 2),
      'utf8'
    );
    
    console.log(`\nüìù Fichiers g√©n√©r√©s:`);
    console.log(`  üìÑ urls-to-remove-from-google.txt - Pour soumission Google Search Console`);
    console.log(`  üìä indexed-announcements-audit.json - Rapport d√©taill√©`);
    
    // 5. Instructions pour la suite
    console.log(`\nüéØ ACTIONS RECOMMAND√âES:`);
    console.log(`\n1. üîß REDIRECTIONS (Priorit√© HAUTE):`);
    console.log(`   - Impl√©menter une redirection des annonces expir√©es/supprim√©es`);
    console.log(`   - Rediriger vers la page destination correspondante`);
    console.log(`   - Ex: /annonce/123 (France‚ÜíR√©union) ‚Üí /france-reunion/`);
    
    console.log(`\n2. üóëÔ∏è SUPPRESSION GOOGLE (Priorit√© MOYENNE):`);
    console.log(`   - Aller dans Google Search Console`);
    console.log(`   - Outils > Suppressions > Supprimer temporairement`);
    console.log(`   - Importer les ${problematicUrls.length} URLs depuis urls-to-remove-from-google.txt`);
    
    console.log(`\n3. üìä MONITORING (Priorit√© BASSE):`);
    console.log(`   - Surveiller que les nouvelles annonces ne s'indexent plus (gr√¢ce au noindex)`);
    console.log(`   - V√©rifier dans 2-4 semaines que les 404 disparaissent`);
    
    console.log(`\n‚úÖ Audit termin√© avec succ√®s !`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'audit:', error);
    process.exit(1);
  }
}

// Ex√©cuter l'audit
auditIndexedAnnouncements();
