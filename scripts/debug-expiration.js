/**
 * Script de diagnostic pour l'expiration des annonces
 * V√©rifie l'√©tat actuel des annonces et de la colonne expires_at
 * Utilise l'API du backend centralis√© Dodomove
 */

const BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'https://web-production-7b738.up.railway.app';

async function diagnosticExpiration() {
  console.log('üîç DIAGNOSTIC SYST√àME D\'EXPIRATION');
  console.log('=====================================\n');

  try {
    // 1. R√©cup√©rer toutes les annonces via l'API backend
    console.log('1Ô∏è‚É£ R√©cup√©ration des annonces via API backend...');
    const response = await fetch(`${BACKEND_URL}/api/partage/get-announcements`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Erreur API Backend: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    const allAnnouncements = data.data || [];
    console.log(`‚úÖ ${allAnnouncements.length} annonces totales r√©cup√©r√©es\n`);

    // 2. Filtrer les annonces published
    const publishedAnnouncements = allAnnouncements.filter(ann => ann.status === 'published');
    console.log(`üìã ${publishedAnnouncements.length} annonces avec status='published'\n`);

    // 3. Analyse d√©taill√©e
    console.log('3Ô∏è‚É£ Analyse d√©taill√©e des annonces published...');
    
    let hasExpiresAt = 0;
    let hasExpiredAt = 0;
    let noExpiresAt = 0;
    let shouldExpireToday = 0;
    
    const today = new Date();
    
    for (const announcement of publishedAnnouncements) {
      console.log(`\nüìÑ ${announcement.id} - ${announcement.contact_first_name} (${announcement.request_type})`);
      
      if (announcement.expires_at) {
        hasExpiresAt++;
        const expiresDate = new Date(announcement.expires_at);
        console.log(`   expires_at: ${announcement.expires_at}`);
        console.log(`   Expire ${expiresDate <= today ? '‚úÖ AUJOURD\'HUI/PASS√â' : '‚è≥ FUTUR'}`);
        
        if (expiresDate <= today) {
          shouldExpireToday++;
        }
      } else {
        noExpiresAt++;
        console.log(`   expires_at: ‚ùå VIDE`);
      }
      
      if (announcement.expired_at) {
        hasExpiredAt++;
        console.log(`   expired_at: ${announcement.expired_at} (d√©j√† expir√©e)`);
      }
      
      if (announcement.shipping_date) {
        console.log(`   shipping_date: ${announcement.shipping_date}`);
      }
    }

    // 4. R√©sum√©
    console.log('\nüìä R√âSUM√â DU DIAGNOSTIC:');
    console.log('========================');
    console.log(`üìã Total annonces published: ${publishedAnnouncements.length}`);
    console.log(`‚úÖ Avec expires_at rempli: ${hasExpiresAt}`);
    console.log(`‚ùå Sans expires_at: ${noExpiresAt}`);
    console.log(`üóìÔ∏è Avec expired_at (d√©j√† expir√©es): ${hasExpiredAt}`);
    console.log(`‚è∞ Devraient expirer aujourd'hui: ${shouldExpireToday}`);

    // 5. Diagnostic final
    console.log('\nüéØ DIAGNOSTIC:');
    if (noExpiresAt > 0) {
      console.log(`‚ùå PROBL√àME: ${noExpiresAt} annonces n'ont pas de expires_at`);
      console.log(`   ‚Üí La colonne expires_at existe-t-elle dans Airtable ?`);
      console.log(`   ‚Üí Les nouvelles annonces sont-elles cr√©√©es avec expires_at ?`);
    }
    
    if (shouldExpireToday === 0) {
      console.log(`‚ÑπÔ∏è NORMAL: Aucune annonce √† expirer aujourd'hui`);
    } else {
      console.log(`‚ö†Ô∏è ATTENTION: ${shouldExpireToday} annonces devraient expirer`);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
}

// Ex√©cution
diagnosticExpiration(); 