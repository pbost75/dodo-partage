// Script pour d√©bugger une annonce sp√©cifique
const fetch = require('node-fetch');

const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
const AIRTABLE_TOKEN = process.env.AIRTABLE_TOKEN;

if (!AIRTABLE_BASE_ID || !AIRTABLE_TOKEN) {
  console.error('‚ùå Variables d\'environnement manquantes: AIRTABLE_BASE_ID et AIRTABLE_TOKEN');
  process.exit(1);
}

/**
 * R√©cup√®re une annonce sp√©cifique par r√©f√©rence
 */
async function getAnnouncementByReference(reference) {
  try {
    const response = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/DodoPartage%20Announcements?filterByFormula={reference} = '${reference}'`,
      {
        headers: {
          'Authorization': `Bearer ${AIRTABLE_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (!response.ok) {
      throw new Error(`Erreur API Airtable: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    return data.records[0] || null;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'annonce:', error);
    throw error;
  }
}

/**
 * Debug complet d'une annonce
 */
function debugAnnouncement(record) {
  if (!record) {
    console.log('‚ùå Annonce non trouv√©e');
    return;
  }
  
  const fields = record.fields;
  const now = new Date();
  
  console.log('\nüîç ANALYSE D√âTAILL√âE DE L\'ANNONCE:');
  console.log('='.repeat(50));
  console.log(`ID Airtable: ${record.id}`);
  console.log(`R√©f√©rence: ${fields.reference}`);
  console.log(`Type: ${fields.request_type}`);
  console.log(`Statut: ${fields.status}`);
  console.log(`Propri√©taire: ${fields.contact_first_name}`);
  console.log(`Email: ${fields.contact_email}`);
  console.log(`Trajet: ${fields.departure_country} ‚Üí ${fields.arrival_country}`);
  console.log(`Ville d√©part: ${fields.departure_city} (${fields.departure_postal_code})`);
  console.log(`Ville arriv√©e: ${fields.arrival_city} (${fields.arrival_postal_code})`);
  
  // Dates importantes
  console.log('\nüìÖ DATES IMPORTANTES:');
  console.log('='.repeat(30));
  console.log(`Cr√©√©e le: ${fields.created_at}`);
  console.log(`Date de d√©part: ${fields.shipping_date || 'Non d√©finie'}`);
  console.log(`Date d'expiration programm√©e: ${fields.expires_at || 'Non d√©finie'}`);
  console.log(`Date d'expiration effective: ${fields.expired_at || 'Non expir√©e'}`);
  console.log(`Date actuelle: ${now.toISOString()}`);
  
  // D√©tails du conteneur (si offer)
  if (fields.request_type === 'offer') {
    console.log('\nüö¢ D√âTAILS CONTENEUR:');
    console.log('='.repeat(25));
    console.log(`Type: ${fields.container_type}`);
    console.log(`Volume disponible: ${fields.container_available_volume} m¬≥`);
    console.log(`Volume minimum: ${fields.container_minimum_volume} m¬≥`);
    console.log(`Type d'offre: ${fields.offer_type}`);
  }
  
  // D√©tails de la recherche (si search)
  if (fields.request_type === 'search') {
    console.log('\nüîç D√âTAILS RECHERCHE:');
    console.log('='.repeat(25));
    console.log(`Volume recherch√©: ${fields.volume_needed} m¬≥`);
    console.log(`Accepte frais: ${fields.accepts_fees}`);
    console.log(`P√©riode: ${fields.shipping_period_formatted}`);
  }
  
  // ANALYSE DE L'EXPIRATION
  console.log('\n‚è∞ ANALYSE DE L\'EXPIRATION:');
  console.log('='.repeat(35));
  
  // V√©rifier si expires_at √©tait d√©fini
  if (fields.expires_at) {
    const expirationDate = new Date(fields.expires_at);
    console.log(`üî¥ EXPIRATION PROGRAMM√âE trouv√©e: ${fields.expires_at}`);
    console.log(`   Date d'expiration: ${expirationDate.toLocaleDateString('fr-FR')}`);
    console.log(`   D√©j√† pass√©e ? ${now >= expirationDate ? 'OUI' : 'NON'}`);
    
    if (now >= expirationDate) {
      console.log(`   ‚úÖ RAISON VALIDE: Expiration programm√©e atteinte`);
      return 'expiration_programmee';
    } else {
      console.log(`   ‚ùå PROBL√àME: Expiration programm√©e dans le futur mais annonce expir√©e !`);
    }
  } else {
    console.log(`‚úÖ Pas d'expiration programm√©e d√©finie`);
  }
  
  // Analyser selon le type
  if (fields.request_type === 'offer') {
    console.log('\nüì¶ ANALYSE OFFRE:');
    if (fields.shipping_date) {
      const shippingDate = new Date(fields.shipping_date);
      const dayAfterShipping = new Date(shippingDate);
      dayAfterShipping.setDate(dayAfterShipping.getDate() + 1);
      
      console.log(`   üö¢ Date de d√©part: ${shippingDate.toLocaleDateString('fr-FR')}`);
      console.log(`   üìÖ Expiration automatique le: ${dayAfterShipping.toLocaleDateString('fr-FR')}`);
      console.log(`   ‚è∞ Date de d√©part pass√©e ? ${now >= dayAfterShipping ? 'OUI' : 'NON'}`);
      
      if (now >= dayAfterShipping) {
        console.log(`   ‚úÖ RAISON VALIDE: Date de d√©part pass√©e`);
        return 'date_depart_passee';
      } else {
        console.log(`   ‚ùå PROBL√àME: Date de d√©part dans le futur mais annonce expir√©e !`);
        console.log(`   üö® ERREUR D'EXPIRATION D√âTECT√âE !`);
      }
    } else {
      console.log(`   ‚ö†Ô∏è  Pas de date de d√©part d√©finie`);
    }
  } else if (fields.request_type === 'search') {
    console.log('\nüîç ANALYSE RECHERCHE:');
    if (fields.created_at) {
      const createdDate = new Date(fields.created_at);
      const expirationDate = new Date(createdDate);
      expirationDate.setDate(expirationDate.getDate() + 60);
      
      console.log(`   üìÖ Cr√©√©e le: ${createdDate.toLocaleDateString('fr-FR')}`);
      console.log(`   üìÖ Expiration automatique le: ${expirationDate.toLocaleDateString('fr-FR')} (60 jours)`);
      console.log(`   ‚è∞ 60 jours √©coul√©s ? ${now >= expirationDate ? 'OUI' : 'NON'}`);
      
      if (now >= expirationDate) {
        console.log(`   ‚úÖ RAISON VALIDE: 60 jours √©coul√©s`);
        return 'delai_recherche_expire';
      } else {
        console.log(`   ‚ùå PROBL√àME: Moins de 60 jours mais annonce expir√©e !`);
        console.log(`   üö® ERREUR D'EXPIRATION D√âTECT√âE !`);
      }
    }
  }
  
  console.log('\nüö® CONCLUSION: EXPIRATION INJUSTIFI√âE D√âTECT√âE !');
  return 'erreur_expiration';
}

/**
 * Fonction principale
 */
async function debugSpecificAnnouncement(reference) {
  console.log(`üîç Debug de l'annonce: ${reference}`);
  
  try {
    const announcement = await getAnnouncementByReference(reference);
    const result = debugAnnouncement(announcement);
    
    if (result === 'erreur_expiration') {
      console.log('\nüõ†Ô∏è  ACTIONS RECOMMAND√âES:');
      console.log('1. Remettre le statut √† "published"');
      console.log('2. V√©rifier le script d\'expiration');
      console.log('3. Analyser les logs d\'expiration');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du debug:', error);
  }
}

// Ex√©cution
if (require.main === module) {
  const reference = process.argv[2] || 'PARTAGE-233976-4N4ID5';
  debugSpecificAnnouncement(reference);
}

module.exports = { debugSpecificAnnouncement }; 